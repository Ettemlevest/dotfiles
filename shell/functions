# TODO: organize functions, this is a mess ATM (maybe separate files?)

# Create a new directory and enter it
mkd() {
  mkdir -v -p "$@" && cd "$@"
}

# find file - file searching with highlighting
ff() {
  find . -iname "*$@*" -exec ls -ld {} + | grep --color=always $@
}

# Laravel Tinker helper
tinker() {
  if [ -z "$1" ]
    then
      php artisan tinker
    else
      php artisan tinker --execute="dd($1);"
  fi
}

# Weather
weather() {
    curl -s "https://wttr.in/${1:-Budapest}?m0F"
}

# Get information of IP address
ip-address() {
    curl -s -H "Accept: application/json" "https://ipinfo.io/${1:-}"
}

# Print README file
readme() {
    for readme in {readme,README}.{md,MD,markdown,mkd,txt,TXT}; do
        if [[ -x "$(command -v glow)" ]] && [[ -f "$readme" ]]; then
            glow -p "$readme"
            break
        elif [[ -f "$readme" ]]; then
            cat "$readme"
        fi
    done
}

# Git commit browser
fshow() {
    local commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    local view_commit="$commit_hash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
    git log --color=always \
        --format="%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset" "$@" | \
    fzf --no-sort --tiebreak=index --no-multi --reverse --ansi \
        --header="enter to view, ctrl-c to copy hash" --preview="$view_commit" \
        --preview-label="ctrl+p to toggle preview window" \
        --bind="enter:execute:$view_commit | less -R" \
        --bind="ctrl-c:execute:$commit_hash | tr -d '\n' | pbcopy" \
        --bind="ctrl-p:toggle-preview"
}

# Fuzzy history search
h() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -li 1 || history -i) | \
    fzf +s --tac --reverse | \
    sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g' | cut -c 18- )
}

# Fuzzy search for brew uninstall
fbu() {
  local selected=$({ brew list -1 --formulae; brew list -1 --cask } |
    sort -k 1 |
    fzf --reverse --multi \
        --preview "HOMEBREW_COLOR=true brew info {}" \
        --bind "ctrl-p:toggle-preview" \
        --preview-label="ctrl+p to toggle preview window" \
        --header="enter to select package to uninstall" \
        --prompt="❯ brew uninstall " --multi |
    tr '\n' ' '
  )

  [[ ! -z $selected ]] &&
    print -z brew uninstall $selected
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

urlencode() {
    setopt localoptions extendedglob
    input=( ${(s::)1} )
    print ${(j::)input/(#b)([^A-Za-z0-9_.\!~*\'\(\)-])/%${(l:2::0:)$(([##16]#match))}}
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "${gzipsize} * 100 / ${origsize}" | /usr/bin/bc -l);
	printf "orig: %d bytes\n" "${origsize}";
	printf "gzip: %d bytes (%2.2f%%)\n" "${gzipsize}" "{$ratio}";
}
